@using System.Text.Json
@using HandsontableBlazor
@using HandsontableBlazor.Interop

<InputSelect @bind-Value:get='Selected' @bind-Value:set='(value) => OnSelect(value)'>
    @foreach (var label in Labels)
    {
        <option>@label</option>
    }
</InputSelect>

@code
{
    [Parameter]
    [EditorRequired]
    public required Pages.Home Parent { get; set; }

    public IList<string> Labels { get; private set; } = null!;

    public required string[] Selected { get; set; } = [];

    private Dictionary<string, IHookFactory> _dict = null!; 

    protected override void OnParametersSet()
    {
        if (_dict == null)
        {
            _dict = new Dictionary<string, IHookFactory>{
                {"afterBeginEditing", new AsyncHookFactory<Hooks.AfterBeginEditingArgs>(Parent)},
                {"afterChange", new AsyncHookFactory<Hooks.AfterChangeArgs>(Parent)},            
                {"beforeCreateCol", new SyncHookFactory<Hooks.BeforeCreateColArgs>(Parent)},            
            };
            Labels  = _dict.Keys.OrderBy(x => x).ToList();
        }
    }

    private async Task OnSelect(string[] value)
    {
        var parent = this.Parent;

        var addHookNames = value.Except(Selected);
        var removeHookNames = Selected.Except(value);
        Selected = value;

        foreach (var hookName in addHookNames)
        {
            var hookFactory = _dict[hookName];
            await hookFactory.AddHook(hookName);
        }

        foreach (var hookName in removeHookNames)
        {
            var hookFactory = _dict[hookName];
            await hookFactory.RemoveHook(hookName);
        }
    }

    interface IHookFactory
    {
        Task AddHook(string hookName);
        Task RemoveHook(string hookName);
    }

    class SyncHookFactory<HookArgsT> : IHookFactory
        where HookArgsT : Hooks.BaseHookArgs
    {
        readonly Pages.Home Parent;

        public SyncHookFactory (Pages.Home parent)
        {
            Parent = parent;
        }

        public async Task AddHook(string hookName)
        {
            await Parent.Handsontable.Core.AddSyncHook<HookArgsT,bool>(hookName, OnHookSync);
        }

        public async Task RemoveHook(string hookName)
        {
            await Parent.Handsontable.Core.RemoveHook<HookArgsT, bool>(hookName, OnHookSync);
        }

        private bool OnHookSync(HookArgsT callbackArgs)
        {
            Parent.AppendToEventLog("OnHookSync", callbackArgs);
            return true;
        }
    }

   class AsyncHookFactory<HookArgsT> : IHookFactory
        where HookArgsT : Hooks.BaseHookArgs
    {
        readonly Pages.Home Parent;

        public AsyncHookFactory (Pages.Home parent)
        {
            Parent = parent;
        }
        
        public async Task AddHook(string hookName)
        {
            await Parent.Handsontable.Core.AddHook<HookArgsT>(hookName, OnHookAsync);
        }

        public async Task RemoveHook(string hookName)
        {
            await Parent.Handsontable.Core.RemoveHook<HookArgsT,Task>(hookName, OnHookAsync);
        }

        private async Task OnHookAsync(HookArgsT callbackArgs)
        {
            Parent.AppendToEventLog("OnHookAsync", callbackArgs);
            await Task.CompletedTask;
        }    
    }
}
