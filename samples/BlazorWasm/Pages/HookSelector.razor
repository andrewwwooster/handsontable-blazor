@using System.Text.Json
@using HandsontableBlazor
@using HandsontableBlazor.Interop

<div class="d-inline-flex flex-column">
    Select Hooks:
    <InputSelect @bind-Value:get='Selected' @bind-Value:set='(value) => OnSelect(value)'>
        @foreach (var label in Labels)
        {
            <option>@label</option>
        }
    </InputSelect>
</div>

@code
{
    [Parameter]
    [EditorRequired]
    public required Pages.Home Parent { get; set; }

    public IList<string> Labels { get; private set; } = null!;

    public required string[] Selected { get; set; } = [];

    private Dictionary<string, IHookFactory> _dict = null!; 

    protected override void OnParametersSet()
    {
        if (_dict == null)
        {
            _dict = new Dictionary<string, IHookFactory>{
                {"afterAddChild", new AsyncHookFactory<Hooks.AfterAddChildArgs>(Parent)},
                {"afterAutofill", new AsyncHookFactory<Hooks.AfterAutofillArgs>(Parent)},
                {"afterBeginEditing", new AsyncHookFactory<Hooks.AfterBeginEditingArgs>(Parent)},
                {"afterCellMetaReset", new AsyncHookFactory<Hooks.AfterCellMetaResetArgs>(Parent)},
                {"afterChange", new AsyncHookFactory<Hooks.AfterChangeArgs>(Parent)},
                {"afterColumnCollapse", new AsyncHookFactory<Hooks.AfterColumnCollapseArgs>(Parent)},
                {"afterColumnExpand", new AsyncHookFactory<Hooks.AfterColumnExpandArgs>(Parent)},
                {"afterColumnFreeze", new AsyncHookFactory<Hooks.AfterColumnFreezeArgs>(Parent)},
                {"afterColumnMove", new AsyncHookFactory<Hooks.AfterColumnMoveArgs>(Parent)},
                {"afterColumnResize", new AsyncHookFactory<Hooks.AfterColumnResizeArgs>(Parent)},
                {"afterColumnSequenceChange", new AsyncHookFactory<Hooks.AfterColumnSequenceChangeArgs>(Parent)},
                {"afterColumnSort", new AsyncHookFactory<Hooks.AfterColumnSortArgs>(Parent)},
                {"afterColumnUnfreeze", new AsyncHookFactory<Hooks.AfterColumnUnfreezeArgs>(Parent)},
                {"afterContextMenuDefaultOptions", new AsyncHookFactory<Hooks.AfterContextMenuDefaultOptionsArgs>(Parent)},
                {"afterContextMenuHide", new AsyncHookFactory<Hooks.AfterContextMenuHideArgs>(Parent)},
                {"afterContextMenuShow", new AsyncHookFactory<Hooks.AfterContextMenuShowArgs>(Parent)},
                {"afterCopy", new AsyncHookFactory<Hooks.AfterCopyArgs>(Parent)},
                {"afterCopyLimit", new AsyncHookFactory<Hooks.AfterCopyLimitArgs>(Parent)},
                {"afterCreateCol", new AsyncHookFactory<Hooks.AfterCreateColArgs>(Parent)},
                {"afterCreateRow", new AsyncHookFactory<Hooks.AfterCreateRowArgs>(Parent)},
                {"afterCut", new AsyncHookFactory<Hooks.AfterCutArgs>(Parent)},
                {"afterDeselect", new AsyncHookFactory<Hooks.AfterDeselectArgs>(Parent)},
                {"afterDestroy", new AsyncHookFactory<Hooks.AfterDestroyArgs>(Parent)},
                {"afterDetachChild", new AsyncHookFactory<Hooks.AfterDetachChildArgs>(Parent)},
                {"afterDocumentKeyDown", new AsyncHookFactory<Hooks.AfterDocumentKeyDownArgs>(Parent)},
                {"afterDrawSelection", new AsyncHookFactory<Hooks.AfterDrawSelectionArgs>(Parent)},
                {"afterDropdownMenuDefaultOptions", new AsyncHookFactory<Hooks.AfterDropdownMenuDefaultOptionsArgs>(Parent)},
                {"afterDropdownMenuHide", new AsyncHookFactory<Hooks.AfterDropdownMenuHideArgs>(Parent)},
                {"afterDropdownMenuShow", new AsyncHookFactory<Hooks.AfterDropdownMenuShowArgs>(Parent)},
                {"afterFilter", new AsyncHookFactory<Hooks.AfterFilterArgs>(Parent)},
                {"afterFormulasValuesUpdate", new AsyncHookFactory<Hooks.AfterFormulasValuesUpdateArgs>(Parent)},
                {"afterGetCellMeta", new AsyncHookFactory<Hooks.AfterGetCellMetaArgs>(Parent)},
                {"afterGetColHeader", new AsyncHookFactory<Hooks.AfterGetColHeaderArgs>(Parent)},
                {"afterGetColumnHeaderRenderers", new AsyncHookFactory<Hooks.AfterGetColumnHeaderRenderersArgs>(Parent)},
                {"afterGetRowHeader", new AsyncHookFactory<Hooks.AfterGetRowHeaderArgs>(Parent)},
                {"afterGetRowHeaderRenderers", new AsyncHookFactory<Hooks.AfterGetRowHeaderRenderersArgs>(Parent)},
                {"afterHideColumns", new AsyncHookFactory<Hooks.AfterHideColumnsArgs>(Parent)},
                {"afterHideRows", new AsyncHookFactory<Hooks.AfterHideRowsArgs>(Parent)},
                {"afterInit", new AsyncHookFactory<Hooks.AfterInitArgs>(Parent)},
                {"afterLanguageChange", new AsyncHookFactory<Hooks.AfterLanguageChangeArgs>(Parent)},
                {"afterListen", new AsyncHookFactory<Hooks.AfterListenArgs>(Parent)},
                {"afterLoadData", new AsyncHookFactory<Hooks.AfterLoadDataArgs>(Parent)},
                {"afterMergeCells", new AsyncHookFactory<Hooks.AfterMergeCellsArgs>(Parent)},
                {"afterModifyTransformEnd", new AsyncHookFactory<Hooks.AfterModifyTransformEndArgs>(Parent)},
                {"afterModifyTransformFocus", new AsyncHookFactory<Hooks.AfterModifyTransformFocusArgs>(Parent)},
                {"afterModifyTransformStart", new AsyncHookFactory<Hooks.AfterModifyTransformStartArgs>(Parent)},
                {"afterMomentumScroll", new AsyncHookFactory<Hooks.AfterMomentumScrollArgs>(Parent)},
                {"afterNamedExpressionAdded", new AsyncHookFactory<Hooks.AfterNamedExpressionAddedArgs>(Parent)},
                {"afterNamedExpressionRemoved", new AsyncHookFactory<Hooks.AfterNamedExpressionRemovedArgs>(Parent)},
                {"afterOnCellContextMenu", new AsyncHookFactory<Hooks.AfterOnCellContextMenuArgs>(Parent)},
                {"afterOnCellCornerDblClick", new AsyncHookFactory<Hooks.AfterOnCellCornerDblClickArgs>(Parent)},
                {"afterOnCellCornerMouseDown", new AsyncHookFactory<Hooks.AfterOnCellCornerMouseDownArgs>(Parent)},
                {"afterOnCellMouseDown", new AsyncHookFactory<Hooks.AfterOnCellMouseDownArgs>(Parent)},
                {"afterOnCellMouseOut", new AsyncHookFactory<Hooks.AfterOnCellMouseOutArgs>(Parent)},
                {"afterOnCellMouseOver", new AsyncHookFactory<Hooks.AfterOnCellMouseOverArgs>(Parent)},
                {"afterOnCellMouseUp", new AsyncHookFactory<Hooks.AfterOnCellMouseUpArgs>(Parent)},
                {"afterPaste", new AsyncHookFactory<Hooks.AfterPasteArgs>(Parent)},
                {"afterPluginsInitialized", new AsyncHookFactory<Hooks.AfterPluginsInitializedArgs>(Parent)},
                {"afterRedo", new AsyncHookFactory<Hooks.AfterRedoArgs>(Parent)},
                {"afterRedoStackChange", new AsyncHookFactory<Hooks.AfterRedoStackChangeArgs>(Parent)},
                {"afterRefreshDimensions", new AsyncHookFactory<Hooks.AfterRefreshDimensionsArgs>(Parent)},
                {"afterRemoveCellMeta", new AsyncHookFactory<Hooks.AfterRemoveCellMetaArgs>(Parent)},
                {"afterRemoveCol", new AsyncHookFactory<Hooks.AfterRemoveColArgs>(Parent)},
                {"afterRemoveRow", new AsyncHookFactory<Hooks.AfterRemoveRowArgs>(Parent)},
                {"afterRender", new AsyncHookFactory<Hooks.AfterRenderArgs>(Parent)},
                {"afterRenderer", new AsyncHookFactory<Hooks.AfterRendererArgs>(Parent)},
                {"afterRowMove", new AsyncHookFactory<Hooks.AfterRowMoveArgs>(Parent)},
                {"afterRowResize", new AsyncHookFactory<Hooks.AfterRowResizeArgs>(Parent)},
                {"afterRowSequenceChange", new AsyncHookFactory<Hooks.AfterRowSequenceChangeArgs>(Parent)},
                {"afterScroll", new AsyncHookFactory<Hooks.AfterScrollArgs>(Parent)},
                {"afterScrollHorizontally", new AsyncHookFactory<Hooks.AfterScrollHorizontallyArgs>(Parent)},
                {"afterScrollVertically", new AsyncHookFactory<Hooks.AfterScrollVerticallyArgs>(Parent)},
                {"afterSelectColumns", new AsyncHookFactory<Hooks.AfterSelectColumnsArgs>(Parent)},
                {"afterSelection", new AsyncHookFactory<Hooks.AfterSelectionArgs>(Parent)},
                {"afterSelectionByProp", new AsyncHookFactory<Hooks.AfterSelectionByPropArgs>(Parent)},
                {"afterSelectionEnd", new AsyncHookFactory<Hooks.AfterSelectionEndArgs>(Parent)},
                {"afterSelectionEndByProp", new AsyncHookFactory<Hooks.AfterSelectionEndByPropArgs>(Parent)},
                {"afterSelectionFocusSet", new AsyncHookFactory<Hooks.AfterSelectionFocusSetArgs>(Parent)},
                {"afterSelectRows", new AsyncHookFactory<Hooks.AfterSelectRowsArgs>(Parent)},
                {"afterSetCellMeta", new AsyncHookFactory<Hooks.AfterSetCellMetaArgs>(Parent)},
                {"afterSetDataAtCell", new AsyncHookFactory<Hooks.AfterSetDataAtCellArgs>(Parent)},
                {"afterSetDataAtRowProp", new AsyncHookFactory<Hooks.AfterSetDataAtRowPropArgs>(Parent)},
                {"afterSetSourceDataAtCell", new AsyncHookFactory<Hooks.AfterSetSourceDataAtCellArgs>(Parent)},
                {"afterSheetAdded", new AsyncHookFactory<Hooks.AfterSheetAddedArgs>(Parent)},
                {"afterSheetRemoved", new AsyncHookFactory<Hooks.AfterSheetRemovedArgs>(Parent)},
                {"afterSheetRenamed", new AsyncHookFactory<Hooks.AfterSheetRenamedArgs>(Parent)},
                {"afterTrimRow", new AsyncHookFactory<Hooks.AfterTrimRowArgs>(Parent)},
                {"afterUndo", new AsyncHookFactory<Hooks.AfterUndoArgs>(Parent)},
                {"afterUndoStackChange", new AsyncHookFactory<Hooks.AfterUndoStackChangeArgs>(Parent)},
                {"afterUnhideColumns", new AsyncHookFactory<Hooks.AfterUnhideColumnsArgs>(Parent)},
                {"afterUnhideRows", new AsyncHookFactory<Hooks.AfterUnhideRowsArgs>(Parent)},
                {"afterUnlisten", new AsyncHookFactory<Hooks.AfterUnlistenArgs>(Parent)},
                {"afterUnmergeCells", new AsyncHookFactory<Hooks.AfterUnmergeCellsArgs>(Parent)},
                {"afterUntrimRow", new AsyncHookFactory<Hooks.AfterUntrimRowArgs>(Parent)},
                {"afterUpdateData", new AsyncHookFactory<Hooks.AfterUpdateDataArgs>(Parent)},
                {"afterUpdateSettings", new AsyncHookFactory<Hooks.AfterUpdateSettingsArgs>(Parent)},
                {"afterValidate", new AsyncHookFactory<Hooks.AfterValidateArgs>(Parent)},
                {"afterViewportColumnCalculatorOverride", new AsyncHookFactory<Hooks.AfterViewportColumnCalculatorOverrideArgs>(Parent)},
                {"afterViewportRowCalculatorOverride", new AsyncHookFactory<Hooks.AfterViewportRowCalculatorOverrideArgs>(Parent)},
                {"afterViewRender", new AsyncHookFactory<Hooks.AfterViewRenderArgs>(Parent)},
                {"beforeAddChild", new SyncHookFactory<Hooks.BeforeAddChildArgs>(Parent)},
                {"beforeAutofill", new SyncHookFactory<Hooks.BeforeAutofillArgs>(Parent)},
                {"beforeBeginEditing", new SyncHookFactory<Hooks.BeforeBeginEditingArgs>(Parent)},
                {"beforeCellAlignment", new SyncHookFactory<Hooks.BeforeCellAlignmentArgs>(Parent)},
                {"beforeChange", new SyncHookFactory<Hooks.BeforeChangeArgs>(Parent)},
                {"beforeChangeRender", new SyncHookFactory<Hooks.BeforeChangeRenderArgs>(Parent)},
                {"beforeColumnCollapse", new SyncHookFactory<Hooks.BeforeColumnCollapseArgs>(Parent)},
                {"beforeColumnExpand", new SyncHookFactory<Hooks.BeforeColumnExpandArgs>(Parent)},
                {"beforeColumnFreeze", new SyncHookFactory<Hooks.BeforeColumnFreezeArgs>(Parent)},
                {"beforeColumnMove", new SyncHookFactory<Hooks.BeforeColumnMoveArgs>(Parent)},
                {"beforeColumnResize", new SyncHookFactory<Hooks.BeforeColumnResizeArgs>(Parent)},
                {"beforeColumnSort", new SyncHookFactory<Hooks.BeforeColumnSortArgs>(Parent)},
                {"beforeColumnUnfreeze", new SyncHookFactory<Hooks.BeforeColumnUnfreezeArgs>(Parent)},
                {"beforeColumnWrap", new SyncHookFactory<Hooks.BeforeColumnWrapArgs>(Parent)},
                {"beforeContextMenuSetItems", new SyncHookFactory<Hooks.BeforeContextMenuSetItemsArgs>(Parent)},
                {"beforeContextMenuShow", new SyncHookFactory<Hooks.BeforeContextMenuShowArgs>(Parent)},
                {"beforeCopy", new SyncHookFactory<Hooks.BeforeCopyArgs>(Parent)},
                {"beforeCreateCol", new SyncHookFactory<Hooks.BeforeCreateColArgs>(Parent)},
                {"beforeCreateRow", new SyncHookFactory<Hooks.BeforeCreateRowArgs>(Parent)},
                {"beforeCut", new SyncHookFactory<Hooks.BeforeCutArgs>(Parent)},
                {"beforeDetachChild", new SyncHookFactory<Hooks.BeforeDetachChildArgs>(Parent)},
                {"beforeDrawBorders", new SyncHookFactory<Hooks.BeforeDrawBordersArgs>(Parent)},
                {"beforeDropdownMenuSetItems", new SyncHookFactory<Hooks.BeforeDropdownMenuSetItemsArgs>(Parent)},
                {"beforeDropdownMenuShow", new SyncHookFactory<Hooks.BeforeDropdownMenuShowArgs>(Parent)},
                {"beforeFilter", new SyncHookFactory<Hooks.BeforeFilterArgs>(Parent)},
                {"beforeGetCellMeta", new SyncHookFactory<Hooks.BeforeGetCellMetaArgs>(Parent)},
                {"beforeHideColumns", new SyncHookFactory<Hooks.BeforeHideColumnsArgs>(Parent)},
                {"beforeHideRows", new SyncHookFactory<Hooks.BeforeHideRowsArgs>(Parent)},
                {"beforeHighlightingColumnHeader", new SyncHookFactory<Hooks.BeforeHighlightingColumnHeaderArgs>(Parent)},
                {"beforeHighlightingRowHeader", new SyncHookFactory<Hooks.BeforeHighlightingRowHeaderArgs>(Parent)},
                {"beforeInit", new SyncHookFactory<Hooks.BeforeInitArgs>(Parent)},
                {"beforeInitWalkontable", new SyncHookFactory<Hooks.BeforeInitWalkontableArgs>(Parent)},
                {"beforeKeyDown", new SyncHookFactory<Hooks.BeforeKeyDownArgs>(Parent)},
                {"beforeLanguageChange", new SyncHookFactory<Hooks.BeforeLanguageChangeArgs>(Parent)},
                {"beforeLoadData", new SyncHookFactory<Hooks.BeforeLoadDataArgs>(Parent)},
                {"beforeMergeCells", new SyncHookFactory<Hooks.BeforeMergeCellsArgs>(Parent)},
                {"beforeOnCellContextMenu", new SyncHookFactory<Hooks.BeforeOnCellContextMenuArgs>(Parent)},
                {"beforeOnCellMouseDown", new SyncHookFactory<Hooks.BeforeOnCellMouseDownArgs>(Parent)},
                {"beforeOnCellMouseOut", new SyncHookFactory<Hooks.BeforeOnCellMouseOutArgs>(Parent)},
                {"beforeOnCellMouseOver", new SyncHookFactory<Hooks.BeforeOnCellMouseOverArgs>(Parent)},
                {"beforeOnCellMouseUp", new SyncHookFactory<Hooks.BeforeOnCellMouseUpArgs>(Parent)},
                {"beforePaste", new SyncHookFactory<Hooks.BeforePasteArgs>(Parent)},
                {"beforeRedo", new SyncHookFactory<Hooks.BeforeRedoArgs>(Parent)},
                {"beforeRedoStackChange", new SyncHookFactory<Hooks.BeforeRedoStackChangeArgs>(Parent)},
                {"beforeRefreshDimensions", new SyncHookFactory<Hooks.BeforeRefreshDimensionsArgs>(Parent)},
                {"beforeRemoveCellClassNames", new SyncHookFactory<Hooks.BeforeRemoveCellClassNamesArgs>(Parent)},
                {"beforeRemoveCellMeta", new SyncHookFactory<Hooks.BeforeRemoveCellMetaArgs>(Parent)},
                {"beforeRemoveCol", new SyncHookFactory<Hooks.BeforeRemoveColArgs>(Parent)},
                {"beforeRemoveRow", new SyncHookFactory<Hooks.BeforeRemoveRowArgs>(Parent)},
                {"beforeRender", new SyncHookFactory<Hooks.BeforeRenderArgs>(Parent)},
                {"beforeRenderer", new SyncHookFactory<Hooks.BeforeRendererArgs>(Parent)},
                {"beforeRowMove", new SyncHookFactory<Hooks.BeforeRowMoveArgs>(Parent)},
                {"beforeRowResize", new SyncHookFactory<Hooks.BeforeRowResizeArgs>(Parent)},
                {"beforeRowWrap", new SyncHookFactory<Hooks.BeforeRowWrapArgs>(Parent)},
                {"beforeSelectColumns", new SyncHookFactory<Hooks.BeforeSelectColumnsArgs>(Parent)},
                {"beforeSelectionFocusSet", new SyncHookFactory<Hooks.BeforeSelectionFocusSetArgs>(Parent)},
                {"beforeSelectionHighlightSet", new SyncHookFactory<Hooks.BeforeSelectionHighlightSetArgs>(Parent)},
                {"beforeSelectRows", new SyncHookFactory<Hooks.BeforeSelectRowsArgs>(Parent)},
                {"beforeSetCellMeta", new SyncHookFactory<Hooks.BeforeSetCellMetaArgs>(Parent)},
                {"beforeSetRangeEnd", new SyncHookFactory<Hooks.BeforeSetRangeEndArgs>(Parent)},
                {"beforeSetRangeStart", new SyncHookFactory<Hooks.BeforeSetRangeStartArgs>(Parent)},
                {"beforeSetRangeStartOnly", new SyncHookFactory<Hooks.BeforeSetRangeStartOnlyArgs>(Parent)},
                {"beforeStretchingColumnWidth", new SyncHookFactory<Hooks.BeforeStretchingColumnWidthArgs>(Parent)},
                {"beforeTouchScroll", new SyncHookFactory<Hooks.BeforeTouchScrollArgs>(Parent)},
                {"beforeTrimRow", new SyncHookFactory<Hooks.BeforeTrimRowArgs>(Parent)},
                {"beforeUndo", new SyncHookFactory<Hooks.BeforeUndoArgs>(Parent)},
                {"beforeUndoStackChange", new SyncHookFactory<Hooks.BeforeUndoStackChangeArgs>(Parent)},
                {"beforeUnhideColumns", new SyncHookFactory<Hooks.BeforeUnhideColumnsArgs>(Parent)},
                {"beforeUnhideRows", new SyncHookFactory<Hooks.BeforeUnhideRowsArgs>(Parent)},
                {"beforeUnmergeCells", new SyncHookFactory<Hooks.BeforeUnmergeCellsArgs>(Parent)},
                {"beforeUntrimRow", new SyncHookFactory<Hooks.BeforeUntrimRowArgs>(Parent)},
                {"beforeUpdateData", new SyncHookFactory<Hooks.BeforeUpdateDataArgs>(Parent)},
                {"beforeValidate", new SyncHookFactory<Hooks.BeforeValidateArgs>(Parent)},
                {"beforeValueRender", new SyncHookFactory<Hooks.BeforeValueRenderArgs>(Parent)},
                {"beforeViewportScroll", new SyncHookFactory<Hooks.BeforeViewportScrollArgs>(Parent)},
                {"beforeViewportScrollHorizontally", new SyncHookFactory<Hooks.BeforeViewportScrollHorizontallyArgs>(Parent)},
                {"beforeViewportScrollVertically", new SyncHookFactory<Hooks.BeforeViewportScrollVerticallyArgs>(Parent)},
                {"beforeViewRender", new SyncHookFactory<Hooks.BeforeViewRenderArgs>(Parent)},
                {"construct", new AsyncHookFactory<Hooks.ConstructArgs>(Parent)},
                {"globalBucket", new AsyncHookFactory<Hooks.GlobalBucketArgs>(Parent)},
                {"init", new AsyncHookFactory<Hooks.InitArgs>(Parent)},
                {"modifyAutoColumnSizeSeed", new AsyncHookFactory<Hooks.ModifyAutoColumnSizeSeedArgs>(Parent)},
                {"modifyAutofillRange", new AsyncHookFactory<Hooks.ModifyAutofillRangeArgs>(Parent)},
                {"modifyColHeader", new AsyncHookFactory<Hooks.ModifyColHeaderArgs>(Parent)},
                {"modifyColumnHeaderHeight", new AsyncHookFactory<Hooks.ModifyColumnHeaderHeightArgs>(Parent)},
                {"modifyColumnHeaderValue", new AsyncHookFactory<Hooks.ModifyColumnHeaderValueArgs>(Parent)},
                {"modifyColWidth", new AsyncHookFactory<Hooks.ModifyColWidthArgs>(Parent)},
                {"modifyCopyableRange", new AsyncHookFactory<Hooks.ModifyCopyableRangeArgs>(Parent)},
                {"modifyData", new AsyncHookFactory<Hooks.ModifyDataArgs>(Parent)},
                {"modifyFiltersMultiSelectValue", new AsyncHookFactory<Hooks.ModifyFiltersMultiSelectValueArgs>(Parent)},
                {"modifyFocusedElement", new AsyncHookFactory<Hooks.ModifyFocusedElementArgs>(Parent)},
                {"modifyFocusOnTabNavigation", new AsyncHookFactory<Hooks.ModifyFocusOnTabNavigationArgs>(Parent)},
                {"modifyGetCellCoords", new AsyncHookFactory<Hooks.ModifyGetCellCoordsArgs>(Parent)},
                {"modifyRowData", new AsyncHookFactory<Hooks.ModifyRowDataArgs>(Parent)},
                {"modifyRowHeader", new AsyncHookFactory<Hooks.ModifyRowHeaderArgs>(Parent)},
                {"modifyRowHeaderWidth", new AsyncHookFactory<Hooks.ModifyRowHeaderWidthArgs>(Parent)},
                {"modifyRowHeight", new AsyncHookFactory<Hooks.ModifyRowHeightArgs>(Parent)},
                {"modifySourceData", new AsyncHookFactory<Hooks.ModifySourceDataArgs>(Parent)},
                {"modifyTransformEnd", new AsyncHookFactory<Hooks.ModifyTransformEndArgs>(Parent)},
                {"modifyTransformFocus", new AsyncHookFactory<Hooks.ModifyTransformFocusArgs>(Parent)},
                {"modifyTransformStart", new AsyncHookFactory<Hooks.ModifyTransformStartArgs>(Parent)},
                {"persistentStateLoad", new AsyncHookFactory<Hooks.PersistentStateLoadArgs>(Parent)},
                {"persistentStateReset", new AsyncHookFactory<Hooks.PersistentStateResetArgs>(Parent)},
                {"persistentStateSave", new AsyncHookFactory<Hooks.PersistentStateSaveArgs>(Parent)}
            };
            Labels  = _dict.Keys.OrderBy(x => x).ToList();
        }
    }

    private async Task OnSelect(string[] value)
    {
        var parent = this.Parent;

        var addHookNames = value.Except(Selected);
        var removeHookNames = Selected.Except(value);
        Selected = value;

        foreach (var hookName in addHookNames)
        {
            var hookFactory = _dict[hookName];
            await hookFactory.AddHook(hookName);
        }

        foreach (var hookName in removeHookNames)
        {
            var hookFactory = _dict[hookName];
            await hookFactory.RemoveHook(hookName);
        }
    }

    interface IHookFactory
    {
        Task AddHook(string hookName);
        Task RemoveHook(string hookName);
    }

    class SyncHookFactory<HookArgsT> : IHookFactory
        where HookArgsT : Hooks.BaseHookArgs
    {
        readonly Pages.Home Parent;

        public SyncHookFactory (Pages.Home parent)
        {
            Parent = parent;
        }

        public async Task AddHook(string hookName)
        {
            await Parent.Handsontable.Core.AddSyncHook<HookArgsT,bool>(hookName, OnHookSync);
        }

        public async Task RemoveHook(string hookName)
        {
            await Parent.Handsontable.Core.RemoveHook<HookArgsT, bool>(hookName, OnHookSync);
        }

        private bool OnHookSync(HookArgsT callbackArgs)
        {
            Parent.AppendToEventLog("OnHookSync", callbackArgs);
            return true;
        }
    }

   class AsyncHookFactory<HookArgsT> : IHookFactory
        where HookArgsT : Hooks.BaseHookArgs
    {
        readonly Pages.Home Parent;

        public AsyncHookFactory (Pages.Home parent)
        {
            Parent = parent;
        }
        
        public async Task AddHook(string hookName)
        {
            await Parent.Handsontable.Core.AddHook<HookArgsT>(hookName, OnHookAsync);
        }

        public async Task RemoveHook(string hookName)
        {
            await Parent.Handsontable.Core.RemoveHook<HookArgsT,Task>(hookName, OnHookAsync);
        }

        private async Task OnHookAsync(HookArgsT callbackArgs)
        {
            Parent.AppendToEventLog("OnHookAsync", callbackArgs);
            await Task.CompletedTask;
        }    
    }
}
