@using System.Text.Json
@using HandsontableBlazor
@using HandsontableBlazor.Interop
@inject IJSRuntime JSRuntime
@typeparam HookArgsT where HookArgsT : Hooks.BaseHookArgs


<label>
    <input type="checkbox" value="@Value" @onchange='(e) => OnChangeToggle(e)'/>
    @Label
</label>

@code
{
    [Parameter]
    [EditorRequired]
    public required Pages.Home Parent { get; set; }
    [Parameter]
    [EditorRequired]
    public required string Label { get; set; }
    [Parameter]
    [EditorRequired]
    public required string HookName { get; set; }
    [Parameter]
    public Func<HookArgsT, Task>? AsyncHookCallback { get; set; }
    [Parameter]
    public Func<HookArgsT, object>? SyncHookCallback { get; set; }

    [Parameter]
    public bool Value { get; set; }

    private async Task OnChangeToggle(ChangeEventArgs args)
    {
        Value = (bool) args.Value!;
        await UpdateHook();
    }

    private async Task UpdateHook()
    {
        if (Value)
        {
            if (AsyncHookCallback != null)
            {
                await Parent.Handsontable.Core.AddHook(HookName, AsyncHookCallback);
            }
            else if (SyncHookCallback != null)
            {
                await Parent.Handsontable.Core.AddSyncHook(HookName, SyncHookCallback);
            }
        }
        else
        {
            if (AsyncHookCallback != null)
            {
                await Parent.Handsontable.Core.RemoveHook(HookName, AsyncHookCallback);
            }
            if (SyncHookCallback != null)
            {
                await Parent.Handsontable.Core.RemoveHook(HookName, SyncHookCallback);
            }
        }
    }
}
