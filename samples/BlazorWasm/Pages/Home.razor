@page "/"
@using System.Text.Json
@using HandsontableBlazor
@using HandsontableBlazor.Interop
@inject IJSRuntime JSRuntime

<PageTitle>Handsontable</PageTitle>

<div>
    <InputSelect @bind-Value="@_alterAction">
        <option>insert_row_above</option>
        <option>insert_row_below</option>
        <option>remove_row</option>
        <option>insert_col_start</option>
        <option>insert_col_end</option>
        <option>remove_col</option>
    </InputSelect>

    Visual Index:
    <InputNumber @bind-Value="_alterVisualIndex"/>

    Amount:
    <InputNumber @bind-Value="_alterAmount"/>

    <button @onclick="OnAlterClick">Alter</button>
</div>
<div>
    <div style="width: 10em; border: 1px solid darkgray;" @onmouseenter="OnGetCellMetaClick" >GetCellMeta</div>
</div>

<div style="border: 1px solid black;">
    <Handsontable 
            Id="hot" 
            ConfigurationOptions="@_configurationOptions" 
            OnAfterChange="@OnHookCallback"
            OnAfterSelection="@OnHookCallback"
            OnAfterSelectionEnd="@OnHookCallback"
            @ref="_handsontable" />
</div>
<pre style="height: 200px;">
    @_eventLog
</pre>

@code
{
    Handsontable _handsontable = null!;
    private HandsontableBlazor.ConfigurationOptions? _configurationOptions = null;
    private HandsontableJsInterop.AlterActionEnum _alterAction = HandsontableJsInterop.AlterActionEnum.insert_row_above;
    private int _alterVisualIndex = 0;
    private int _alterAmount = 1;
    private string _eventLog = "";
   
    protected override void OnInitialized ()
    {
         _configurationOptions = new HandsontableBlazor.ConfigurationOptions 
         {
            DataArrayOfArrays =  [
                [ 1, "12!", "13" ],
                [ 21, "22!", "23" ],
                [ 31, "32!", "33" ]
            ],
            /*
            DataArrayOfObjects =  {
                new Dictionary<string, object> { 
                    { "A", 11 }, { "B", "12!" }, { "b", "13" } 
                },
                new Dictionary<string, object> { 
                    { "A", 21 }, { "B", "22!" }, { "b", "23" } 
                },
                new Dictionary<string, object> { 
                    { "A", 31 }, { "B", "32!" }, { "b", "33" } 
                }
            },
            */
            Cell = [
                new ConfigurationOptions.HtCell(0,0) { ReadOnly = true },
                new ConfigurationOptions.HtCell(1,0) { ReadOnly = true },
                new ConfigurationOptions.HtCell(2,0) { ReadOnly = true },
            ],
            ColHeaders = new string[] { "A", "B", "C" },
            RendererCallback = OnRenderCallback,
            RowHeaders = true,
            Height = 200,
            Width = 300
        };
    }

    private async Task OnAlterClick()
    {
        await _handsontable.HandsontableJsInterop!.Alter(
            _alterAction, _alterVisualIndex, _alterAmount, "source", false);
    }

    private async Task OnGetCellMetaClick()
    {
        var ranges = await _handsontable.HandsontableJsInterop!.GetSelectedRange();
        if (ranges != null)
        {
            var properties = await _handsontable.HandsontableJsInterop!.GetCellMeta(ranges[0].X1, ranges[0].Y1);
            var propertiesJson = JsonSerializer.Serialize(properties);
            _eventLog = "getCellMeta(): " + propertiesJson + "\n"
                + _eventLog;
            StateHasChanged();              // Required because event was initiated by JS.
        }
    }

    private async Task OnHookCallback(Hooks.BaseHookArgs args)
    {
        var json = JsonSerializer.Serialize((object) args);
        _eventLog = $"{json}\n"
            + _eventLog;
        StateHasChanged(); 
        await Task.CompletedTask;
    }

    private async Task OnRenderCallback(Renderer.RendererArgs args)
    {
        await args.Td.Attr("style", "background-color: yellow; color: #000000;");
        await args.Td.Text(args.Value.ToString() ?? "");
    }
}
