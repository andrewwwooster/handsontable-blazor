@page "/"
@using static Handsontable.Blazor.HandsontableHooks

<PageTitle>Home</PageTitle>

<h1>Hello, world!!!!</h1>

<button @onclick="AddRow">Add Row</button>

<div style="border: 1px solid black;">
    <Handsontable.Blazor.Handsontable 
            Id="hot" 
            ConfigurationOptions="@_configurationOptions" 
            OnAfterChange="@OnAfterChange"
            @ref="_handsontable" />
</div>

<p>@_onChangeValue</p>

@code
{
    Handsontable.Blazor.Handsontable? _handsontable;

    private string _onChangeValue = string.Empty;

    Handsontable.Blazor.ConfigurationOptions _configurationOptions = new Handsontable.Blazor.ConfigurationOptions
    {
        Data =  {
            new Dictionary<string, object> { 
                { "A", 11 }, { "B", "12!" }, { "b", "13" } 
            },
            new Dictionary<string, object> { 
                { "A", 21 }, { "B", "22!" }, { "b", "23" } 
            },
            new Dictionary<string, object> { 
                { "A", 31 }, { "B", "32!" }, { "b", "33" } 
            }
        },
        ColHeaders = new string[] { "A", "B", "C" },
        Renderer = "customRenderer",
        RowHeaders = true,
        Height = 300,
        Width = 300
    };
   

    private async Task AddRow()
    {
        await _handsontable!.HandsontableJsInterop!.Alter(
            Handsontable.Blazor.HandsontableJsInterop.AlterActionEnum.insert_row_above, 0);
    }

    private async Task OnAfterChange(AfterChangeArgs args)
    {
        _onChangeValue = $"OnAfterChange: {args.Data[0][0]} {args.Data[0][1]} {args.Data[0][2]} {args.Data[0][3]} {args.Source}";
        StateHasChanged();              // Required because event was initiated by JS.
        await Task.CompletedTask;
    }
}
