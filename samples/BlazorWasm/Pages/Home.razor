@page "/"
@using System.Text.Json
@using HandsontableBlazor
@using HandsontableBlazor.Interop
@inject IJSRuntime JSRuntime

<PageTitle>Handsontable</PageTitle>

<InputSelect @bind-Value="_actionMethod">
    <option>Alter</option>
    <option>GetCellMeta</option>
    <option>SetCellData</option>
    <option>SetCellMeta</option>
</InputSelect>

@if (_actionMethod == "Alter")
{
    <div>
        <InputSelect @bind-Value="_alterAction">
            <option>insert_row_above</option>
            <option>insert_row_below</option>
            <option>remove_row</option>
            <option>insert_col_start</option>
            <option>insert_col_end</option>
            <option>remove_col</option>
        </InputSelect>

        Visual Index: <InputNumber @bind-Value="_actionRow"/>
        Amount: <InputNumber @bind-Value="_actionColumn"/>

        <button 
            @onclick='() => Handsontable.HandsontableJsInterop!.Alter(_alterAction, _actionRow, _actionColumn)'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "GetCellMeta")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick="@(async () => {
                var data = await Handsontable.HandsontableJsInterop!.GetCellMeta(_actionRow, _actionColumn);
                AppendToEventLog("GetCellMeta", data);
            })">
            Apply
        </button>
    </div>
}
else if (_actionMethod == "SetCellData")
{
    <div>
        Row: <InputNumber CssStyle="width: 4em" @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        Value: <InputText @bind-Value="_actionValue"/>
        <button @onclick="() => Handsontable.HandsontableJsInterop!.SetDataAtCell(_actionRow, _actionColumn, _actionValue)">Apply</button>
    </div>
}
else if (_actionMethod == "SetCellMeta")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        Key: <InputText @bind-Value="_actionKey"/>
        Value: <InputText @bind-Value="_actionValue"/>
        <button @onclick="() => Handsontable.HandsontableJsInterop!.SetCellMeta(_actionRow, _actionColumn, _actionKey, _actionValue)">Apply</button>
    </div>
}

<HookCheckbox Label="OnAfterChange" HookName="afterChange" HookCallback="OnHookCallback" HookArgsT="Hooks.AfterChangeArgs" Parent="this"/>
<HookCheckbox Label="OnAfterCreateCol" HookName="afterCreateCol" HookCallback="OnHookCallback" HookArgsT="Hooks.AfterCreateColArgs" Parent="this"/>
<HookCheckbox Label="OnAfterCreateRow" HookName="afterCreateRow" HookCallback="OnHookCallback" HookArgsT="Hooks.AfterCreateRowArgs" Parent="this"/>
<HookCheckbox Label="OnAfterRemoveCol" HookName="afterRemoveCol" HookCallback="OnHookCallback" HookArgsT="Hooks.AfterRemoveColArgs" Parent="this"/>
<HookCheckbox Label="OnAfterRemoveRow" HookName="afterRemoveRow" HookCallback="OnHookCallback" HookArgsT="Hooks.AfterRemoveRowArgs" Parent="this"/>
<HookCheckbox Label="OnAfterSelection" HookName="afterSelection" HookCallback="OnHookCallback" HookArgsT="Hooks.AfterSelectionArgs" Parent="this"/>
<HookCheckbox Label="OnAfterSelectionEnd" HookName="afterSelectionEnd" HookCallback="OnHookCallback" HookArgsT="Hooks.AfterSelectionEndArgs" Parent="this"/>


<div style="border: 1px solid black;">
    <Handsontable 
            Id="hot" 
            ConfigurationOptions="@_configurationOptions" 
            @ref="Handsontable"/>
</div>

<InputTextArea @bind-Value="_eventLog" style="height: 20em; width: 60em; white-space: pre; overflow: auto;" scrollTop="1000em" readonly="true"/>

@code
{
    public Handsontable Handsontable { get; private set; } = null!;

    private HandsontableBlazor.ConfigurationOptions? _configurationOptions = null;

    private string _actionMethod = "SetCellData";
    private int _actionRow = 0;
    private int _actionColumn = 0;
    private string _actionKey = "";
    private string _actionValue = "";
    private HandsontableJsInterop.AlterActionEnum _alterAction = HandsontableJsInterop.AlterActionEnum.insert_row_above;

    private string _eventLog = "";
   
    protected override void OnInitialized ()
    {
         _configurationOptions = new HandsontableBlazor.ConfigurationOptions 
         {
            DataArrayOfArrays =  [
                [ 1, "12!", "13" ],
                [ 21, "22!", "23" ],
                [ 31, "32!", "33" ]
            ],
            /*
            DataArrayOfObjects =  {
                new Dictionary<string, object> { 
                    { "A", 11 }, { "B", "12!" }, { "b", "13" } 
                },
                new Dictionary<string, object> { 
                    { "A", 21 }, { "B", "22!" }, { "b", "23" } 
                },
                new Dictionary<string, object> { 
                    { "A", 31 }, { "B", "32!" }, { "b", "33" } 
                }
            },
            */
            Cell = [
                new ConfigurationOptions.HtCell(1,2) { ReadOnly = true },
                new ConfigurationOptions.HtCell(2,2) { ReadOnly = true },
            ],
            ColHeaders = new string[] { "A", "B", "C" },
            RendererCallback = OnRenderCallback,
            RowHeaders = true,
            Height = 200,
            Width = 300
        };
    }

    private void AppendToEventLog(string label, object properties)
    {
        var propertiesJson = JsonSerializer.Serialize(properties);
        var newLine = label + ": " + propertiesJson;
        _eventLog = newLine + "\n" + _eventLog;
        StateHasChanged();              // Required because event was initiated by JS.
    }
    
    private async Task OnHookCallback(Hooks.BaseHookArgs args)
    {
        AppendToEventLog("OnHookCallback", args);
        await Task.CompletedTask;
    }

    private async Task OnRenderCallback(Renderer.RendererArgs args)
    {
        await args.Td.Attr("style", "background-color: yellow; color: #000000;");
        await args.Td.Text(args.Value.ToString() ?? "");
    }
}
