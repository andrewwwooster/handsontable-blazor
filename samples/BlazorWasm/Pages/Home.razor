@page "/"
@using System.Text.Json
@using HandsontableBlazor
@using HandsontableBlazor.Interop
@inject IJSRuntime JSRuntime

<PageTitle>Handsontable</PageTitle>

<InputSelect @bind-Value="_actionMethod">
    <option>Alter</option>
    <option>Clear</option>
    <option>ClearUndo</option>
    <option>ColToProp</option>
    <option>CountColHeaders</option>
    <option>CountCols</option>
    <option>CountEmptyCols</option>
    <option>CountEmptyRows</option>
    <option>CountRenderedCols</option>
    <option>CountRenderedRows</option>
    <option>CountRows</option>
    <option>CountRowHeaders</option>
    <option>CountSourceCols</option>
    <option>CountSourceRows</option>
    <option>CountVisibleCols</option>
    <option>CountVisibleRows</option>
    <option>GetCellMeta</option>
    <option>HasColHeaders</option>
    <option>HasHook</option>
    <option>HasRowHeaders</option>
    <option>IsColumnModificationAllowed</option>
    <option>IsEmptyCol</option>
    <option>IsEmptyRow</option>
    <option>IsExecutionSuspended</option>
    <option>IsListening</option>
    <option>IsLtr</option>
    <option>IsRedoAvailable</option>
    <option>SetCellData</option>
    <option>SetCellMeta</option>
</InputSelect>

@if (_actionMethod == "Alter")
{
    <div>
        <InputSelect @bind-Value="_alterAction">
            <option>insert_row_above</option>
            <option>insert_row_below</option>
            <option>remove_row</option>
            <option>insert_col_start</option>
            <option>insert_col_end</option>
            <option>remove_col</option>
        </InputSelect>

        Visual Index: <InputNumber @bind-Value="_actionRow"/>
        Amount: <InputNumber @bind-Value="_actionColumn"/>

        <button 
            @onclick='() => Handsontable.Core.Alter(_alterAction, _actionRow, _actionColumn)'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "Clear")
{
    <div>
        <button 
            @onclick='() => Handsontable.Core.Clear()'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "ClearUndo")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("ClearUndo", await Handsontable.Core.ClearUndo())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "ColToProp")
{
    <div>
        Visual Index: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick='async () => AppendToEventLog("ColToProp", await Handsontable.Core.ColToPropString(_actionColumn))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountColHeaders")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("CountColHeaders", await Handsontable.Core.CountColHeaders())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountCols")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("CountCols", await Handsontable.Core.CountCols())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountEmptyCols")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("CountEmptyCols", await Handsontable.Core.CountEmptyCols())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountEmptyRows")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("CountEmptyRows", await Handsontable.Core.CountEmptyRows())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountRenderedCols")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("CountRenderedCols", await Handsontable.Core.CountRenderedCols())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountRenderedRows")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("CountRenderedRows", await Handsontable.Core.CountRenderedRows())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountSourceCols")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("CountSourceCols", await Handsontable.Core.CountSourceCols())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountSourceRows")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("CountSourceRows", await Handsontable.Core.CountSourceRows())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountVisibleCols")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("CountVisibleCols", await Handsontable.Core.CountVisibleCols())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountVisibleRows")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("CountVisibleRows", await Handsontable.Core.CountVisibleRows())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountRowHeaders")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("CountRowHeaders", await Handsontable.Core.CountRowHeaders())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountRows")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("CountRows", await Handsontable.Core.CountRows())'>
            Apply
        </button>
    </div>
}

else if (_actionMethod == "GetCellMeta")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick="@(async () => {
                var data = await Handsontable.Core.GetCellMeta(_actionRow, _actionColumn);
                AppendToEventLog("GetCellMeta", data);
            })">
            Apply
        </button>
    </div>
}
else if (_actionMethod == "HasColHeaders")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("HasColHeaders", await Handsontable.Core.HasColHeaders())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "HasHook")
{
    <div>
        Hook Name: <InputText @bind-Value="_actionKey"/>
        <button 
            @onclick='async () => AppendToEventLog("HasHook", await Handsontable.Core.HasHook(_actionKey))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "HasRowHeaders")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("HasRowHeaders", await Handsontable.Core.HasRowHeaders())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsColumnModificationAllowed")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("IsColumnModificationAllowed", await Handsontable.Core.IsColumnModificationAllowed())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsEmptyCol")
{
    <div>
        Column: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick='async () => AppendToEventLog("IsEmptyCol", await Handsontable.Core.IsEmptyCol(_actionColumn))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsEmptyRow")
{
    <div>
        Column: <InputNumber @bind-Value="_actionRow"/>
        <button 
            @onclick='async () => AppendToEventLog("IsEmptyRow", await Handsontable.Core.IsEmptyRow(_actionRow))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsExecutionSuspended")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("IsExecutionSuspended", await Handsontable.Core.IsExecutionSuspended())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsListening")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("IsListening", await Handsontable.Core.IsListening())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsLtr")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("IsLtr", await Handsontable.Core.IsLtr())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsRedoAvailable")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog("IsRedoAvailable", await Handsontable.Core.IsRedoAvailable())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "SetCellData")
{
    <div>
        Row: <InputNumber CssStyle="width: 4em" @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        Value: <InputText @bind-Value="_actionValue"/>
        <button @onclick="() => Handsontable.Core.SetDataAtCell(_actionRow, _actionColumn, _actionValue)">Apply</button>
    </div>
}
else if (_actionMethod == "SetCellMeta")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        Key: <InputText @bind-Value="_actionKey"/>
        Value: <InputText @bind-Value="_actionValue"/>
        <button @onclick="() => Handsontable.Core.SetCellMeta(_actionRow, _actionColumn, _actionKey, _actionValue)">Apply</button>
    </div>
}

<HookCheckbox Label="OnAfterChange" HookName="afterChange" AsyncHookCallback="OnHookCallback" HookArgsT="Hooks.AfterChangeArgs" Parent="this"/>
<HookCheckbox Label="OnAfterCreateCol" HookName="afterCreateCol" AsyncHookCallback="OnHookCallback" HookArgsT="Hooks.AfterCreateColArgs" Parent="this"/>
<HookCheckbox Label="OnAfterCreateRow" HookName="afterCreateRow" AsyncHookCallback="OnHookCallback" HookArgsT="Hooks.AfterCreateRowArgs" Parent="this"/>
<HookCheckbox Label="OnAfterRemoveCol" HookName="afterRemoveCol" AsyncHookCallback="OnHookCallback" HookArgsT="Hooks.AfterRemoveColArgs" Parent="this"/>
<HookCheckbox Label="OnAfterRemoveRow" HookName="afterRemoveRow" AsyncHookCallback="OnHookCallback" HookArgsT="Hooks.AfterRemoveRowArgs" Parent="this"/>
<HookCheckbox Label="OnAfterSelection" HookName="afterSelection" AsyncHookCallback="OnHookCallback" HookArgsT="Hooks.AfterSelectionArgs" Parent="this"/>
<HookCheckbox Label="OnAfterSelectionEnd" HookName="afterSelectionEnd" AsyncHookCallback="OnHookCallback" HookArgsT="Hooks.AfterSelectionEndArgs" Parent="this"/>
<HookCheckbox Label="OnBeforeCreateCol" HookName="beforeCreateCol" SyncHookCallback="OnHookCallbackSync" HookArgsT="Hooks.BeforeCreateColArgs" Parent="this"/>
<HookCheckbox Label="OnBeforeCreateRow" HookName="beforerCreateRow" SyncHookCallback="OnHookCallbackSync" HookArgsT="Hooks.BeforeCreateRowArgs" Parent="this"/>
<HookCheckbox Label="OnBeforeRemoveCol" HookName="beforeRemoveCol" SyncHookCallback="OnHookCallbackSync" HookArgsT="Hooks.BeforeRemoveColArgs" Parent="this"/>
<HookCheckbox Label="OnBeforeRemoveRow" HookName="beforeRemoveRow" SyncHookCallback="OnHookCallbackSync" HookArgsT="Hooks.BeforeRemoveRowArgs" Parent="this"/>


<div style="border: 1px solid black;">
    <Handsontable 
            Id="hot" 
            ConfigurationOptions="@_configurationOptions" 
            @ref="Handsontable"/>
</div>

<InputTextArea @bind-Value="_eventLog" style="height: 20em; width: 60em; white-space: pre; overflow: auto;" scrollTop="1000em" readonly="true"/>

@code
{
    public Handsontable Handsontable { get; private set; } = null!;

    private HandsontableBlazor.ConfigurationOptions? _configurationOptions = null;

    private string _actionMethod = "SetCellData";
    private int _actionRow = 0;
    private int _actionColumn = 0;
    private string _actionKey = "";
    private string _actionValue = "";
    private HandsontableJsInterop.AlterActionEnum _alterAction = HandsontableJsInterop.AlterActionEnum.insert_row_above;

    private string _eventLog = "";
   
    protected override void OnInitialized ()
    {
         _configurationOptions = new HandsontableBlazor.ConfigurationOptions 
         {
            DataArrayOfArrays =  [
                [ 1, "12!", "13" ],
                [ 21, "22!", "23" ],
                [ 31, "32!", "33" ]
            ],
            /*
            DataArrayOfObjects =  {
                new Dictionary<string, object> { 
                    { "A", 11 }, { "B", "12!" }, { "b", "13" } 
                },
                new Dictionary<string, object> { 
                    { "A", 21 }, { "B", "22!" }, { "b", "23" } 
                },
                new Dictionary<string, object> { 
                    { "A", 31 }, { "B", "32!" }, { "b", "33" } 
                }
            },
            */
            Cell = [
                new ConfigurationOptions.HtCell(1,2) { ReadOnly = true },
                new ConfigurationOptions.HtCell(2,2) { ReadOnly = true },
            ],
            ColHeaders = new string[] { "A", "B", "C" },
            RendererCallback = OnRenderCallback,
            RowHeaders = true,
            Height = 200,
            Width = 300
        };
    }

    private void AppendToEventLog(string label, object properties)
    {
        var propertiesJson = JsonSerializer.Serialize(properties);
        var newLine = label + ": " + propertiesJson;
        _eventLog = newLine + "\n" + _eventLog;
        StateHasChanged();              // Required because event was initiated by JS.
    }
    
    private async Task OnHookCallback(Hooks.BaseHookArgs args)
    {
        AppendToEventLog("OnHookCallback", args);
        await Task.CompletedTask;
    }

    private object OnHookCallbackSync(Hooks.BaseHookArgs args)
    {
        AppendToEventLog("OnHookCallbackBool", args);
        return false;
    }

    private async Task OnRenderCallback(Renderer.RendererArgs args)
    {
        await args.Td.Attr("style", "background-color: yellow; color: #000000;");
        var value = args.Value?.ToString();
        await args.Td.Text(value ?? "");
    }
}
