@page "/"
@using System.Text.Json
@using HandsontableBlazor
@using HandsontableBlazor.Interop
@inject IJSRuntime JSRuntime

<PageTitle>Handsontable</PageTitle>

<InputSelect @bind-Value="_actionMethod">
    <option>Alter</option>
    <option>Clear</option>
    <option>ClearUndo</option>
    <option>ColToProp</option>
    <option>CountColHeaders</option>
    <option>CountCols</option>
    <option>CountEmptyCols</option>
    <option>CountEmptyRows</option>
    <option>CountRenderedCols</option>
    <option>CountRenderedRows</option>
    <option>CountRows</option>
    <option>CountRowHeaders</option>
    <option>CountSourceCols</option>
    <option>CountSourceRows</option>
    <option>CountVisibleCols</option>
    <option>CountVisibleRows</option>
    <option>Destroy</option>
    <option>EmptySelectedCells</option>
    <option>GetCell</option>
    <option>GetCellMeta</option>
    <option>GetCellsMeta</option>
    <option>GetCellMetaAtRow</option>
    <option>GetColWidth</option>
    <option>GetData</option>
    <option>GetDataType</option>
    <option>GetRowHeight</option>
    <option>HasColHeaders</option>
    <option>HasHook</option>
    <option>HasRowHeaders</option>
    <option>IsColumnModificationAllowed</option>
    <option>IsEmptyCol</option>
    <option>IsEmptyRow</option>
    <option>IsExecutionSuspended</option>
    <option>IsListening</option>
    <option>IsLtr</option>
    <option>IsRedoAvailable</option>
    <option>Listen</option>
    <option>Redo</option>
    <option>RefreshDimensions</option>
    <option>RemoveCellMeta</option>
    <option>SelectAll</option>
    <option>SelectCell</option>
    <option>SelectCells</option>
    <option>SelectColumns</option>
    <option>SelectRows</option>
    <option>SetCellMeta</option>
    <option>SetDataAtCell</option>
    <option>ToHtml</option>
    <option>ToPhysicalColumn</option>
    <option>ToPhysicalRow</option>
    <option>ToTableElement</option>
    <option>ToVisualColumn</option>
    <option>ToVisualRow</option>
    <option>ToHtml</option>
    <option>Undo</option>
    <option>Unlisten</option>
    <option>UpdateSettings</option>
    <option>ValidateCells</option>
    <option>ValidateColumns</option>
    <option>ValidateRows</option>
</InputSelect>

@if (_actionMethod == "Alter")
{
    <div>
        <InputSelect @bind-Value="_alterAction">
            <option>insert_row_above</option>
            <option>insert_row_below</option>
            <option>remove_row</option>
            <option>insert_col_start</option>
            <option>insert_col_end</option>
            <option>remove_col</option>
        </InputSelect>

        Visual Index: <InputNumber @bind-Value="_actionRow"/>
        Amount: <InputNumber @bind-Value="_actionColumn"/>

        <button 
            @onclick='() => Handsontable.Core.Alter(_alterAction, _actionRow, _actionColumn)'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "Clear")
{
    <div>
        <button 
            @onclick='() => Handsontable.Core.Clear()'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "ClearUndo")
{
    <div>
        <button 
            @onclick='async () => await Handsontable.Core.ClearUndo()'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "ColToProp")
{
    <div>
        Visual Index: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.ColToPropString(_actionColumn))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountColHeaders")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.CountColHeaders())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountCols")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.CountCols())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountEmptyCols")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.CountEmptyCols())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountEmptyRows")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.CountEmptyRows())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountRenderedCols")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.CountRenderedCols())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountRenderedRows")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.CountRenderedRows())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountSourceCols")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.CountSourceCols())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountSourceRows")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.CountSourceRows())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountVisibleCols")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.CountVisibleCols())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountVisibleRows")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.CountVisibleRows())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountRowHeaders")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.CountRowHeaders())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "CountRows")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.CountRows())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "Destroy")
{
    <div>
        <button 
            @onclick='async () => await Handsontable.Core.Destroy()'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "EmptySelectedCells")
{
    <div>
        <button 
            @onclick='async () => await Handsontable.Core.EmptySelectedCells()'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "GetCellMeta")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick="@(async () => {
                var data = await Handsontable.Core.GetCellMeta(_actionRow, _actionColumn);
                AppendToEventLog(_actionMethod, data);
            })">
            Apply
        </button>
    </div>
}
else if (_actionMethod == "GetCellMetaAtRow")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        <button 
            @onclick="@(async () => {
                var data = await Handsontable.Core.GetCellMetaAtRow(_actionRow);
                AppendToEventLog(_actionMethod, data);
            })">
            Apply
        </button>
    </div>
}
else if (_actionMethod == "GetCellsMeta")
{
    <div>
        <button 
            @onclick="@(async () => {
                var data = await Handsontable.Core.GetCellsMeta();
                AppendToEventLog(_actionMethod, data);
            })">
            Apply
        </button>
    </div>
}
else if (_actionMethod == "GetCell")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick="@(async () => {
                var jq = await Handsontable.Core.GetCell(_actionRow, _actionColumn);
                var html = await jq.Html();
                AppendToEventLog("GetCell", html);
            })">
            Apply
        </button>
    </div>
}
else if (_actionMethod == "GetColWidth")
{
    <div>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick='@(async () => AppendToEventLog(_actionMethod, await Handsontable.Core.GetColWidth(_actionColumn)))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "GetData")
{
    <div>
        Row2: <InputNumber @bind-Value="_actionRow"/>
        Column2: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick='@(async () => AppendToEventLog(_actionMethod, await Handsontable.Core.GetData(_actionRow, _actionColumn, null, null)))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "GetDataType")
{
    <div>
        Row To: <InputNumber @bind-Value="_actionRow"/>
        Column Ro: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick='@(async () => AppendToEventLog(_actionMethod, await Handsontable.Core.GetDataType(0, 0, _actionRow, _actionColumn)))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "GetRowHeight")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        <button 
            @onclick='@(async () => AppendToEventLog(_actionMethod, await Handsontable.Core.GetRowHeight(_actionRow)))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "HasColHeaders")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.HasColHeaders())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "HasHook")
{
    <div>
        Hook Name: <InputText @bind-Value="_actionKey"/>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.HasHook(_actionKey))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "HasRowHeaders")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.HasRowHeaders())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsColumnModificationAllowed")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.IsColumnModificationAllowed())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsEmptyCol")
{
    <div>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.IsEmptyCol(_actionColumn))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsEmptyRow")
{
    <div>
        Col: <InputNumber @bind-Value="_actionRow"/>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.IsEmptyRow(_actionRow))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsExecutionSuspended")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.IsExecutionSuspended())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsListening")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.IsListening())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsLtr")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.IsLtr())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "IsRedoAvailable")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.IsRedoAvailable())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "Listen")
{
    <div>
        <button 
            @onclick='async () => await Handsontable.Core.Listen()'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "Redo")
{
    <div>
        <button 
            @onclick='async () => await Handsontable.Core.Redo()'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "RefreshDimensions")
{
    <div>
        <button 
            @onclick='async () => await Handsontable.Core.RefreshDimensions()'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "RemoveCellMeta")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        Key: <InputText @bind-Value="_actionKey"/>
        <button 
            @onclick='async () => await Handsontable.Core.RemoveCellMeta(_actionRow, _actionColumn, _actionKey)'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "SelectAll")
{
    <div>
        <button @onclick='async () => await Handsontable.Core.SelectAll()'>Apply</button>
    </div>
}
else if (_actionMethod == "SelectCell")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        <button @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.SelectCell(_actionRow, _actionColumn))'>Apply</button>
    </div>
}
else if (_actionMethod == "SelectCells")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        <button @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.SelectCells([[_actionRow, _actionColumn]]))'>Apply</button>
    </div>
}
else if (_actionMethod == "SelectColumns")
{
    <div>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        <button @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.SelectColumns(_actionColumn))'>Apply</button>
    </div>
}
else if (_actionMethod == "SelectRows")
{
    <div>
        Row: <InputNumber  @bind-Value="_actionRow"/>
        <button @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.SelectRows(_actionRow))'>Apply</button>
    </div>
}
else if (_actionMethod == "SetCellMeta")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        Key: <InputText @bind-Value="_actionKey"/>
        Value: <InputText @bind-Value="_actionValue"/>
        <button @onclick="() => Handsontable.Core.SetCellMeta(_actionRow, _actionColumn, _actionKey, _actionValue)">Apply</button>
    </div>
}
else if (_actionMethod == "SetDataAtCell")
{
    <div>
        Row: <InputNumber @bind-Value="_actionRow"/>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        Value: <InputText @bind-Value="_actionValue"/>
        <button @onclick="() => Handsontable.Core.SetDataAtCell(_actionRow, _actionColumn, _actionValue)">Apply</button>
    </div>
}
else if (_actionMethod == "ToHtml")
{
    <div>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.ToHtml())'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "ToPhysicalColumn")
{
    <div>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.ToPhysicalColumn(_actionColumn))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "ToPhysicalRow")
{
    <div>
        Col: <InputNumber @bind-Value="_actionRow"/>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.ToPhysicalRow(_actionRow))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "ToTableElement")
{
    <div>
        <button 
            @onclick='async () => {
                var jq = await Handsontable.Core.ToTableElement();
                var html = await jq.Html();
                AppendToEventLog("ToTableElement", html);
            }'
        >
            Apply
        </button>
    </div>
}
else if (_actionMethod == "ToVisualColumn")
{
    <div>
        Col: <InputNumber @bind-Value="_actionColumn"/>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.ToVisualColumn(_actionColumn))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "ToVisualRow")
{
    <div>
        Col: <InputNumber @bind-Value="_actionRow"/>
        <button 
            @onclick='async () => AppendToEventLog(_actionMethod, await Handsontable.Core.ToVisualRow(_actionRow))'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "Undo")
{
    <div>
        <button 
            @onclick='async () => await Handsontable.Core.Undo()'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "Unlisten")
{
    <div>
        <button 
            @onclick='async () => await Handsontable.Core.Unlisten()'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "UpdateSettings")
{
    <div>
        <InputSelect @bind-Value="_updateOptionName">
            <option>width</option>
            <option>height</option>
        </InputSelect>
        Size: <InputNumber @bind-Value="_actionRow"/>
        <button 
            @onclick='async () => await Handsontable.Core.UpdateSettings(new Dictionary<string, object>{ {_updateOptionName, _actionRow } })'>
            Apply
        </button>
    </div>
}
else if (_actionMethod == "ValidateCells")
{
    <div>
        <button 
            @onclick='async () => await Handsontable.Core.ValidateCells(OnCallbackAsync)'>
            Apply
        </button>
    </div>
}else if (_actionMethod == "ValidateColumns")
{
    <div>
        Start Col: <InputNumber @bind-Value="_actionRow"/>
        End Col: <InputNumber @bind-Value="_actionColumn"/>
        @{
            var columns = Enumerable.Range(_actionRow, 1+_actionColumn-_actionRow).ToArray();
            <button 
                @onclick='async () => await Handsontable.Core.ValidateColumns(columns, OnCallbackAsync)'>
                Apply
            </button>
        }
    </div>
}else if (_actionMethod == "ValidateRows")
{
    <div>
        Start Row: <InputNumber @bind-Value="_actionRow"/>
        End Row: <InputNumber @bind-Value="_actionColumn"/>
        @{
            var rows = Enumerable.Range(_actionRow, 1+_actionColumn-_actionRow).ToArray();
            <button 
                @onclick='async () => await Handsontable.Core.ValidateRows(rows, OnCallbackAsync)'>
                Apply
            </button>
        }
    </div>
}

<HookCheckbox Label="OnAfterChange" HookName="afterChange" AsyncHookCallback="OnCallbackAsync" HookArgsT="Hooks.AfterChangeArgs" Parent="this"/>
<HookCheckbox Label="OnAfterCreateCol" HookName="afterCreateCol" AsyncHookCallback="OnCallbackAsync" HookArgsT="Hooks.AfterCreateColArgs" Parent="this"/>
<HookCheckbox Label="OnAfterCreateRow" HookName="afterCreateRow" AsyncHookCallback="OnCallbackAsync" HookArgsT="Hooks.AfterCreateRowArgs" Parent="this"/>
<HookCheckbox Label="OnAfterRemoveCol" HookName="afterRemoveCol" AsyncHookCallback="OnCallbackAsync" HookArgsT="Hooks.AfterRemoveColArgs" Parent="this"/>
<HookCheckbox Label="OnAfterRemoveRow" HookName="afterRemoveRow" AsyncHookCallback="OnCallbackAsync" HookArgsT="Hooks.AfterRemoveRowArgs" Parent="this"/>
<HookCheckbox Label="OnAfterSelection" HookName="afterSelection" AsyncHookCallback="OnCallbackAsync" HookArgsT="Hooks.AfterSelectionArgs" Parent="this"/>
<HookCheckbox Label="OnAfterSelectionEnd" HookName="afterSelectionEnd" AsyncHookCallback="OnCallbackAsync" HookArgsT="Hooks.AfterSelectionEndArgs" Parent="this"/>
<HookCheckbox Label="OnBeforeCreateCol" HookName="beforeCreateCol" SyncHookCallback="OnCallbackSync" HookArgsT="Hooks.BeforeCreateColArgs" Parent="this"/>
<HookCheckbox Label="OnBeforeCreateRow" HookName="beforeCreateRow" SyncHookCallback="OnCallbackSync" HookArgsT="Hooks.BeforeCreateRowArgs" Parent="this"/>
<HookCheckbox Label="OnBeforeRemoveCol" HookName="beforeRemoveCol" SyncHookCallback="OnCallbackSync" HookArgsT="Hooks.BeforeRemoveColArgs" Parent="this"/>
<HookCheckbox Label="OnBeforeRemoveRow" HookName="beforeRemoveRow" SyncHookCallback="OnCallbackSync" HookArgsT="Hooks.BeforeRemoveRowArgs" Parent="this"/>


<div style="border: 1px solid black;">
    <Handsontable 
            Id="hot" 
            ConfigurationOptions="@_configurationOptions" 
            @ref="Handsontable"/>
</div>

<InputTextArea id="event-log" @bind-Value="_eventLog" style="height: 20em; width: 60em; white-space: pre; overflow: auto;" scrollTop="1000em" readonly="true"/>

@code
{
    public Handsontable Handsontable { get; private set; } = null!;

    private HandsontableBlazor.ConfigurationOptions? _configurationOptions = null;

    private string _actionMethod = "SetDataAtCell";
    private int _actionRow = 0;
    private int _actionColumn = 0;
    private string _actionKey = "";
    private string _actionValue = "";
    private string _updateOptionName = "width";
    private HandsontableJsInterop.AlterActionEnum _alterAction = HandsontableJsInterop.AlterActionEnum.insert_row_above;

    private string _eventLog = "";
   
    protected override void OnInitialized ()
    {
         _configurationOptions = new HandsontableBlazor.ConfigurationOptions 
         {
            DataArrayOfArrays =  [
                [ 1, "12!", "13" ],
                [ 21, "22!", "23" ],
                [ 31, "32!", "33" ]
            ],
            /*
            DataArrayOfObjects =  {
                new Dictionary<string, object> { 
                    { "A", 11 }, { "B", "12!" }, { "b", "13" } 
                },
                new Dictionary<string, object> { 
                    { "A", 21 }, { "B", "22!" }, { "b", "23" } 
                },
                new Dictionary<string, object> { 
                    { "A", 31 }, { "B", "32!" }, { "b", "33" } 
                }
            },
            */
            Cell = [
                new ConfigurationOptions.HtCell(1,2) { ReadOnly = true },
                new ConfigurationOptions.HtCell(2,2) { ReadOnly = true },
            ],
            ColHeaders = new string[] { "A", "B", "C" },
            RendererCallback = OnRenderCallback,
            RowHeaders = true,
            Height = 200,
            Width = 300
        };
    }

    private void AppendToEventLog(string label, object? properties)
    {
        var propertiesJson = JsonSerializer.Serialize(properties);
        var newLine = label + ": " + propertiesJson;
        _eventLog = newLine + "\n" + _eventLog;
        StateHasChanged();              // Required because event was initiated by JS.
    }

    private async Task OnCallbackAsync<CallbackArgsT>(CallbackArgsT callbackArgs)
        where CallbackArgsT : Callbacks.ICallbackArgs
    {
        AppendToEventLog("OnCallbackAsync", callbackArgs);
        await Task.CompletedTask;
    }    

    private async Task OnCallbackAsync(JsonDocument jdoc)
    {
        AppendToEventLog("OnCallbackAsync", jdoc);
        await Task.CompletedTask;
    }

    private object OnCallbackSync(Callbacks.ICallbackArgs callbackArgs)
    {
        AppendToEventLog("OnCallbackSync", callbackArgs);
        return true;
    }

    private async Task OnRenderCallback(Renderer.RendererArgs args)
    {
        await args.Td.Attr("style", "background-color: yellow; color: #000000;");
        var value = args.Value?.ToString();
        await args.Td.Text(value ?? "");
    }
}
