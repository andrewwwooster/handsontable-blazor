@namespace HandsontableBlazor
@using Microsoft.JSInterop
@using HandsontableBlazor
@using HandsontableBlazor.Interop
@inject IJSRuntime JSRuntime

<div id="hot">
</div>

@code 
{
    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public ConfigurationOptions? ConfigurationOptions { get; set; }
    [Parameter]
    public Func<Hooks.AfterChangeArgs,Task>? OnAfterChange { get; set; }
    [Parameter]
    public Func<Hooks.AfterSelectionArgs,Task>? OnAfterSelection { get; set; }

    public HandsontableJsInterop? HandsontableJsInterop { get; private set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && HandsontableJsInterop == null && ConfigurationOptions != null)
        {
            HandsontableJsInterop = new HandsontableJsInterop(JSRuntime);
            await HandsontableJsInterop.RegisterRenderer("customRenderer", RendererCallback);
            await HandsontableJsInterop.NewHandsontable(
                Id!, ConfigurationOptions
            );
            if (OnAfterChange != null) await HandsontableJsInterop.AddHookAfterChange(OnAfterChange);
            if (OnAfterSelection != null) await HandsontableJsInterop.AddHookAfterSelection(OnAfterSelection);
        }
    }

    public async Task RendererCallback(Renderer.RendererArgs args)
    {
        await args.Td.Attr("style", "background-color: yellow; color: #000000;");
    }
}

